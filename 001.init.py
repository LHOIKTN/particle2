import pygame
import sys


# pygame 라이브러리 초기화 (반드시 필요!)
# pygame을 사용하기 전에 항상 호출
pygame.init()


# 화면 크기 설정 (가로 x 세로)
WIDTH = 1200   # 화면 가로 크기 (픽셀)
HEIGHT = 800   # 화면 세로 크기 (픽셀)

# 화면 생성
# pygame.display.set_mode()는 화면을 생성하는 함수
screen = pygame.display.set_mode((WIDTH, HEIGHT))


# 색상은 (R, G, B) 형태로 정의합니다
# R: Red (빨강), G: Green (초록), B: Blue (파랑)
# 각 값은 0~255 사이의 숫자입니다

WHITE = (255, 255, 255)  # 흰색 (모든 색상 최대값)
BLACK = (0, 0, 0)        # 검은색 (모든 색상 최소값)
RED = (255, 0, 0)        # 빨간색
GREEN = (0, 255, 0)      # 초록색
BLUE = (0, 0, 255)       # 파란색
YELLOW = (255, 255, 0)   # 노란색 (빨강 + 초록)

# ========================================
# 🎮 4단계: 메인 게임 루프
# ========================================

def main():
    """
    메인 함수 - 게임의 시작점
    """
    print("🚀 pygame 초기화 완료!")
    print(f"📐 화면 크기: {WIDTH} x {HEIGHT}")
    print("🎮 게임을 시작합니다...")
    print("📋 조작법:")
    print("   - ESC 키: 게임 종료")
    print("   - 창 닫기: 게임 종료")
    
    # 게임 시계 생성 (프레임 레이트 조절용)
    clock = pygame.time.Clock()
    
    # 게임 실행 여부를 나타내는 변수
    running = True
    
    # 🎮 메인 게임 루프
    # 게임이 실행되는 동안 계속 반복되는 부분
    while running:

        # ========================================
        # 📥 이벤트 처리 (사용자 입력 받기)
        # ========================================
        # pygame.event.get()은 사용자의 입력을 받아오는 함수입니다
        for event in pygame.event.get():
            # 창 닫기 버튼을 눌렀을 때
            if event.type == pygame.QUIT:
                running = False  # 게임 루프 종료
                
            # 키보드 키를 눌렀을 때
            elif event.type == pygame.KEYDOWN:
                # ESC 키를 눌렀을 때
                if event.key == pygame.K_ESCAPE:
                    running = False  # 게임 루프 종료
        


        # ========================================
        # 🎨 화면 그리기
        # ========================================
        
        # 화면을 검은색으로 지우기
        # surface.fill()은 화면을 특정 색상으로 채우는 함수입니다
        screen.fill(BLACK)
        
        # 지금은 빈 검은 화면만 보입니다.
        
        # ========================================
        # 📺 화면 업데이트
        # ========================================
        
        # 화면에 그린 내용을 실제로 표시하기
        # pygame.display.flip()은 더블 버퍼링을 위한 함수입니다

        #더블버퍼링:  비디오 메모리만을 사용한 싱글 버퍼링으로 그래픽을 그릴 경우 
        # 데이터를 저장하는 동안에는 다음 그림의 데이터를 전송할 수 없기 때문에 
        # 지우고 그리고 지우고 그리고 할 경우 필연적으로 발생하는 깜빡임, 찢어짐 등의 
        # 상황을 막기 위해서 사용되는 기법
        pygame.display.flip()
        
        # 프레임 레이트 제한 (60 FPS)
        # clock.tick()은 초당 프레임 수를 제한하는 함수입니다
        clock.tick(60)
    
    # ========================================
    # while 문 밖으로 나오면  게임 종료
    # ========================================
    
    print("👋 게임을 종료합니다.")
    pygame.quit()  # pygame 종료
    sys.exit()     # 프로그램 종료

# ========================================
# 🎯 실습 과제
# ========================================

# 프로그램 시작
if __name__ == "__main__":
    main()
